@{
    ViewData["Title"] = "Customer Data Management";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    List<object> filterColumns = new List<object>();
    filterColumns.Add(new { field = "entityId", matchCase = false, @operator = "equal", predicate = "and", value = "nonexistingentity" });
    List<object> filterbyEntityCategoryId = new List<object>();
    filterbyEntityCategoryId.Add(new { field = "entityCategoryId", matchCase = false, @operator = "equal", predicate = "and", value = "nonexistingentity" });
    List<object> filterbyId = new List<object>();
    filterbyId.Add(new { field = "id", matchCase = false, @operator = "equal", predicate = "and", value = "nonexistingentity" });

    List<object> cols = new List<object>();
    cols.Add(new { field = "classifiedName", direction = "Ascending" });

}
<ejs-toast id="toast" showCloseButton="true" showProgressBar="true" timeOut="3000">
    <e-toast-position X="Right" Y="Top"></e-toast-position>
</ejs-toast>
<h1>Customer Data Management</h1>

<div id="ej2Tab">
    <div class="e-tab-header">
        <div>New Customer </div>
        <div>Existing Customer </div>
    </div>
    <div class="e-content">
        <div>
            <div class="row">
                <dl>
                    <dt class="col-sm-5">
                        <ejs-treegrid id="EntitiesTreeGrid" dataSource="@ViewBag.entitiesDataSource" idMapping="categoryId" parentIdMapping="parentCategoryId"
                                      treeColumnIndex="1" childMapping="true" rowSelected="EntitiesGridRowSelected" rowDeselected="EntitiesGridRowDeselected"
                                      allowRowDragAndDrop="false" actionComplete="EntitiesActionComplete">
                            <e-treegrid-filtersettings type="Menu"></e-treegrid-filtersettings>
                            <e-treegrid-columns>
                                <e-treegrid-column field="categoryId" headerText="" textAlign="Left" width="0" visible="false"></e-treegrid-column>
                                <e-treegrid-column field="categoryName" headerText="Category" textAlign="Left" width="95"></e-treegrid-column>
                                <e-treegrid-column field="entityName" headerText="Entity" textAlign="Left" width="95"></e-treegrid-column>
                                <e-treegrid-column field="entityId" headerText="entity Id" textAlign="Left" width="95" visible="false"></e-treegrid-column>
                            </e-treegrid-columns>
                        </ejs-treegrid>
                        <br />
                        <ejs-button id="save" content="SAVE" cssClass="controlbutton"></ejs-button>
                    </dt>
                    <dt class="col-sm-7">
                        <input id="newInstanceName" class="form-control" disabled placeholder="" onchange="UpdateInstanceInfo()" />
                        <br />
                        <ejs-grid id="InstanceGrid" actionComplete="ValidateInput">
                            <e-grid-editSettings allowEditing="true"></e-grid-editSettings>
                            <e-grid-columns>
                                <e-grid-column field="propertyId" isPrimaryKey="true" headerText="Property" textAlign="Left" allowEditing="false" visible="false"></e-grid-column>
                                <e-grid-column field="propertyName" headerText="Property" textAlign="Left" allowEditing="false"></e-grid-column>
                                <e-grid-column field="value" headerText="Value"></e-grid-column>
                            </e-grid-columns>
                        </ejs-grid>

                    </dt>
                </dl>
              

            </div>


        </div>
        <div>
            <div class="row">
                <dl>
                    <dt class="col-sm-8">
                        <input id="searchCustomers" class="form-control" placeholder="Search customers by any value" />
                        <ejs-button id="search" content="Search" cssClass="controlbutton"></ejs-button>
                        <br />
                        <ejs-treegrid id="CustomersTreeGrid" idMapping="id" parentIdMapping="parentId" allowResizing="true"
                                      treeColumnIndex="1" childMapping="true"
                                      allowRowDragAndDrop="false" rowSelected="customerRowSelected" rowDeselected="customerRowDeselected"
                                      allowPaging="true"
                                      allowSorting="true"
                                      allowFiltering="true"
                                      allowExcelExport="true"
                                      allowPdfExport="true"
                                      toolbarClick="toolbarClick"
                                      enableCollapseAll="false"
                                      toolbar="@(new List<string>() { "Search","ExcelExport","PdfExport","ExpandAll","CollapseAll"})">
                            <e-treegrid-pagesettings pageSizes="true" pageSize="20" pageSizeMode="Root">
                            </e-treegrid-pagesettings>
                            <e-treegrid-filterSettings type="Menu"></e-treegrid-filterSettings>
                            <e-treegrid-searchsettings hierarchyMode="Both"></e-treegrid-searchsettings>
                            <e-treegrid-filtersettings type="Menu" hierarchyMode="Both"></e-treegrid-filtersettings>
                            <e-treegrid-sortsettings columns="cols"></e-treegrid-sortsettings>
                            <e-treegrid-columns>
                                <e-treegrid-column field="id" headerText="" textAlign="Left" width="0" visible="false"></e-treegrid-column>
                                <e-treegrid-column field="classifiedName" headerText="Classification" textAlign="Left" width="100" clipMode="EllipsisWithTooltip"></e-treegrid-column>
                                <e-treegrid-column field="property" headerText="Property" textAlign="Left" width="50" clipMode="EllipsisWithTooltip"></e-treegrid-column>
                                <e-treegrid-column field="value" headerText="Value" textAlign="Left" width="90" clipMode="EllipsisWithTooltip"></e-treegrid-column>
                                <e-treegrid-column field="instanceId" headerText="instanceId" textAlign="Left" width="95" visible="false"></e-treegrid-column>
                                <e-treegrid-column field="entityId" headerText="entityId" textAlign="Left" width="95" visible="false"></e-treegrid-column>
                                <e-treegrid-column field="entityName" headerText="entityName" textAlign="Left" width="95" visible="false"></e-treegrid-column>
                                <e-treegrid-column field="categoryId" headerText="categoryId" textAlign="Left" width="95" visible="false"></e-treegrid-column>
                                <e-treegrid-column field="customerId" headerText="customerId" textAlign="Left" width="95" visible="false"></e-treegrid-column>
                                <e-treegrid-column field="valueId" headerText="valueId" textAlign="Left" width="95" visible="false"></e-treegrid-column>
                                <e-treegrid-column field="primaryPropertyValue" headerText="primaryPropertyValue" textAlign="Left" width="95" visible="false"></e-treegrid-column>
                            </e-treegrid-columns>
                        </ejs-treegrid>
                    </dt>
                    <dt class="col-sm-4">
                        <p id="selectedCustomerNotification">Please select a customer</p>
                        <ejs-dropdowntree id="categoriesTDDL" enabled="false" popupHeight="200px" placeholder="Select a category" change="categoriesTDDLvalueChange" changeOnBlur="false">
                            <e-dropdowntree-fields dataSource="ViewBag.categoriesDataSource" value="id" parentValue="parentId" text="categoryName" expanded="expanded" hasChildren="hasChild"></e-dropdowntree-fields>
                        </ejs-dropdowntree>
                        <ejs-dropdownlist id="entitiesDDL" popupHeight="200px" placeholder="Select an entity" change="entitiesDDLvalueChange" enabled="false">
                            <e-dropdownlist-fields value="id" text="entityName"></e-dropdownlist-fields>
                        </ejs-dropdownlist>
                        <input id="newInstanceName2" class="form-control" disabled placeholder="" />
                        <br />
                        <ejs-grid id="InstanceGrid2" actionComplete="ValidateInput2">
                            <e-grid-editSettings allowEditing="true"></e-grid-editSettings>
                            <e-grid-columns>
                                <e-grid-column field="propertyId" isPrimaryKey="true" headerText="Property" textAlign="Left" allowEditing="false" visible="false"></e-grid-column>
                                <e-grid-column field="propertyName" headerText="Property" textAlign="Left" allowEditing="false"></e-grid-column>
                                <e-grid-column field="value" headerText="Value"></e-grid-column>
                            </e-grid-columns>
                        </ejs-grid>
                        <br />
                        <p>
                            <ejs-button id="saveExisting" content="SAVE" cssClass="controlbutton"></ejs-button>
                        </p>
                        <p>
                            <ejs-button id="delete" cssClass="controlbutton danger" content="DELETE SELECTED INSTANCE"></ejs-button>
                        </p>
                    </dt>
                </dl>
             

            </div>
        </div>
    </div>
</div>

    <style>
        .e-content .e-item {
            font-size: 12px;
            padding: 10px;
            text-align: justify;
        }

        .danger {
            background-color: red;
            color: white;
        }
    </style>
    <script type="text/javascript">

        var unsavedData;
        var selectedCategory;
        var selectedEntity;
        var selectedProperty;
        var assignChannel;
        var unAssignChannel;
        var selectedCategoryName;
        var selectedEntityName;
        var selectedPropertyName;
        var selectedChannel;
        var selectedLoginProperty
        var selectedPropertyUI
        var selectedCustomer;
        var selectedInstance;
        var selectedInstanceName;
        var selectedDataValueId;
        var selectedInstanceCategory;
        var selectedInstanceEntity;
        var DialogObj;


        var tabObj = new ej.navigations.Tab({
            heightAdjustMode: "auto"
        });
        tabObj.appendTo('#ej2Tab');



        



        function customerRowSelected(args) {

            var selectedCustomerNotification = document.getElementById("selectedCustomerNotification");
            selectedCustomerNotification.innerHTML = args.data.primaryPropertyValue + " is selected";
            var saveExisting = document.getElementById("saveExisting").ej2_instances[0];
            var ddTreeObj = document.getElementById("categoriesTDDL").ej2_instances[0];
            var EntitiesDDL = document.getElementById("entitiesDDL").ej2_instances[0];

            //alert(args.rowIndex);
            var CustomersTreeGrid = document.getElementById("CustomersTreeGrid").ej2_instances[0];
            //CustomersTreeGrid.expandCollapseRow(args.rowIndex);
            var Instance = document.getElementById("InstanceGrid2").ej2_instances[0];
            var instanceName = document.getElementById("newInstanceName2");
            selectedCustomer = args.data.customerId;
            selectedInstance = args.data.instanceId;
            selectedInstanceCategory = args.data.categoryId;
            selectedInstanceEntity = args.data.entityId;
            if (selectedInstance) {
                var str_array = [selectedInstanceCategory];
                ddTreeObj.value = str_array;
                selectedCategory = selectedInstanceCategory;
                EntitiesDDL.value = selectedInstanceEntity
                selectedEntity = args.data.entityId;
                ddTreeObj.enabled = false;
                EntitiesDDL.enabled = false;
                
                instanceName.disabled = false;
                instanceName.placeholder = "Alias for " + args.data.entityName + " (Optional)";
                saveExisting.content = "UPDATE";
                $.ajax({
                    type: 'POST',
                    url: '../CustomerDataManagement/GetCustomerInstance',
                    data: { instanceId: selectedInstance },
                    success: function (result) {
                        
                        Instance.dataSource = result.properties;

                        Instance.refresh();

                        instanceName.value = result.instanceName;


                    }
                });
            }
            else {
                if (selectedInstanceEntity) {
                    var str_array = [selectedInstanceCategory];
                    ddTreeObj.value = str_array;
                    selectedCategory = selectedInstanceCategory;
                    EntitiesDDL.value = selectedInstanceEntity
                    selectedEntity = args.data.entityId;
                    ddTreeObj.enabled = false;
                    EntitiesDDL.enabled = false;

                    instanceName.disabled = false;
                    instanceName.placeholder = "Alias for " + args.data.entityName + " (Optional)";
                    saveExisting.content = "ADD";
                    entitiesDDLvalueChange();

                }
                else {
                    if (selectedInstanceCategory) {
                        var str_array = [selectedInstanceCategory];
                        ddTreeObj.value = str_array;
                        selectedCategory = selectedInstanceCategory;
                        EntitiesDDL.value = null;
                        selectedEntity = "";
                        ddTreeObj.enabled = false;
                        EntitiesDDL.enabled = true;

                        instanceName.disabled = true;
                        instanceName.placeholder = "";
                        saveExisting.content = "ADD";
                        categoriesTDDLvalueChange();
                    }
                    else {
                        var str_array = [""];
                        ddTreeObj.value = null;
                        selectedCategory = "";
                        EntitiesDDL.value = null;
                        selectedEntity = "";
                        ddTreeObj.enabled = true;
                        EntitiesDDL.enabled = false;

                        instanceName.disabled = true;
                        instanceName.placeholder = "";
                        saveExisting.content = "ADD";
                    }
                }
                
                
            }

        }

        function customerRowDeselected(args) {
            selectedCustomer = "";
            selectedInstance = "";
            selectedEntity = "";
            unsavedData = "";
            selectedCategory = "";
            var selectedCustomerNotification = document.getElementById("selectedCustomerNotification");
            selectedCustomerNotification.innerHTML = "Please select a customer";
            var Instance = document.getElementById("InstanceGrid2").ej2_instances[0];
            var instanceName = document.getElementById("newInstanceName2");
            var saveExisting = document.getElementById("saveExisting").ej2_instances[0];
            instanceName.placeholder = "";
            saveExisting.content = "ADD";
            

            Instance.dataSource = null;
            Instance.refresh();
            instanceName.value = "";
            instanceName.disabled = true;
            selectedInstanceCategory = "";
            selectedInstanceEntity = "";

            var ddTreeObj = document.getElementById("categoriesTDDL").ej2_instances[0];
            var EntitiesDDL = document.getElementById("entitiesDDL").ej2_instances[0];

            try {
                ddTreeObj.value = null;
                //ddTreeObj.refresh();
            }
            catch (err) {
                //alert("An error has occurred, reloading the page.");
                //location.reload();
                alert(err.message);
            }
            
            


            ddTreeObj.enabled = false;
            EntitiesDDL.enabled = false;


            

        }

        


        function categoriesTDDLvalueChange() {
            var ddTreeObj = document.getElementById("categoriesTDDL").ej2_instances[0];
            var EntitiesDDL = document.getElementById("entitiesDDL").ej2_instances[0];
            var Instance = document.getElementById("InstanceGrid2").ej2_instances[0];
            var instanceName = document.getElementById("newInstanceName2");
            var categoryId = ddTreeObj.value;
            selectedCategory = ddTreeObj.value;
            //if (!selectedInstance && !selectedInstanceCategory) {
            //    EntitiesDDL.enabled = true;
            //}
            
            $.ajax({
                type: 'POST',
                url: '../CustomerDataManagement/GetEntities',
                data: { categoryId: categoryId },
                success: function (result) {

                    EntitiesDDL.dataSource = null;

                    EntitiesDDL.dataBind();

                    EntitiesDDL.dataSource = result;

                    EntitiesDDL.dataBind();
                    if (selectedInstanceEntity) {
                        EntitiesDDL.value = selectedInstanceEntity;
                    }


                }
            });
            //if (!selectedInstance && !selectedEntity && selectedCategory !== [""]) {
            //    EntitiesDDL.enabled = true;
            //}
            


        }

        function entitiesDDLvalueChange() {
            if (selectedCustomer) {
                var EntitiesDDL = document.getElementById("entitiesDDL").ej2_instances[0];
                var ddTreeObj = document.getElementById("categoriesTDDL").ej2_instances[0];
                if (selectedInstance) {
                    //ddTreeObj.enabled = false;
                    //EntitiesDDL.enabled = false;
                }
                else {

                    var saveExisting = document.getElementById("saveExisting").ej2_instances[0];
                    saveExisting.content = "ADD";
                    unsavedData = "";


                    var entityId = EntitiesDDL.value;
                    var Instance = document.getElementById("InstanceGrid2").ej2_instances[0];
                    selectedInstance = "";
                    selectedEntity = entityId;

                    var instanceName = document.getElementById("newInstanceName2");

                    if (entityId) {
                        instanceName.disabled = false;
                        instanceName.placeholder = "Alias for " + EntitiesDDL.text + " (Optional)";
                    }
                    else {
                        instanceName.value = "";
                        instanceName.placeholder = "";
                        instanceName.disabled = true;
                    }
                    $.ajax({
                        type: 'POST',
                        url: '../CustomerDataManagement/GetEntityInstanceProperties',
                        data: { entityId: entityId, existing: true },
                        success: function (result) {

                            Instance.dataSource = null;
                            Instance.dataSource = result;

                            Instance.refresh();
                        }
                    });
                    $.ajax({
                        type: 'POST',
                        url: '../CustomerDataManagement/GetInstanceName',
                        data: { entityId: entityId, existing: true },
                        success: function (result) {

                            instanceName.value = result;
                        }
                    });

                }
            }
            
            

        }


        function EntitiesGridRowSelected(args) {
            var Instance = document.getElementById("InstanceGrid").ej2_instances[0];
            var instanceName = document.getElementById("newInstanceName");
            var entityId = args.data.entityId;
            selectedEntity = entityId;
            if (selectedEntity) {
                instanceName.disabled = false;
                instanceName.placeholder = "Alias for " + args.data.entityName + " (Optional)";
            }
            else {
                instanceName.disabled = true;
                instanceName.placeholder = "";
            }
            $.ajax({
                type: 'POST',
                url: '../CustomerDataManagement/GetEntityInstanceProperties',
                data: { entityId: entityId },
                success: function (result) {

                    Instance.dataSource = null;
                    Instance.dataSource = result;

                    Instance.refresh();
                }
            });
            $.ajax({
                type: 'POST',
                url: '../CustomerDataManagement/GetInstanceName',
                data: { entityId: entityId },
                success: function (result) {

                    instanceName.value = result;
                }
            });

        }
        function EntitiesGridRowDeselected(args) {
            var Instance = document.getElementById("InstanceGrid").ej2_instances[0];
            var instanceName = document.getElementById("newInstanceName");
            instanceName.disabled = true;
            selectedEntity = "";
            $.ajax({
                type: 'POST',
                url: '../CustomerDataManagement/GetEntityInstanceProperties/',
                data: { datefilter: $("#datefilter").val() },
                success: function (result) {

                    Instance.dataSource = null;
                    Instance.dataSource = result;

                    Instance.refresh();
                }
            });

            $.ajax({
                type: 'POST',
                url: '../CustomerDataManagement/GetInstanceName/',
                data: { datefilter: $("#datefilter").val() },
                success: function (result) {

                    instanceName.value = result;
                }
            });
        }
        function entitiesToolbarClick(args) {


        }

        function toolbarClick(args) {
            var gridObj = document.getElementById("CustomersTreeGrid").ej2_instances[0];
            if (args.item.id === 'CustomersTreeGrid_gridcontrol_pdfexport') {
                var exportProperties = {
                    header: {
                        fromTop: 0,
                        height: 130,
                        contents: [
                            {
                                type: 'PageNumber',
                                pageNumberType: 'Arabic',
                                format: 'Page {$current} of {$total} ', //optional
                                position: { x: 0, y: 50 },
                                style: { textBrushColor: '#000000', fontSize: 11, hAlign: 'Center' }
                            },
                            {
                                type: 'Line',
                                style: { penColor: '#000080', penSize: 2, dashStyle: 'Solid' },
                                points: { x1: 0, y1: 30, x2: 685, y2: 30 }
                            },
                            {
                                type: 'Text',
                                value: "eLogin - Customers Info Report",
                                position: { x: 0, y: 0 },
                                style: { textBrushColor: '#000000', fontSize: 18 }
                            },
                            {
                                type: 'Text',
                                value: "" + new Date(),
                                position: { x: 0, y: 35 },
                                style: { textBrushColor: '#000000', fontSize: 11, hAlign: 'Center' }
                            },
                        ]
                    },
                    pageOrientation: 'Portrait',
                };
                gridObj.pdfExport(exportProperties);
            }
            if (args.item.id === 'CustomersTreeGrid_gridcontrol_excelexport') {
                gridObj.excelExport();
            }


        }

        document.getElementById('search').onclick = function () {
            var searchCustomers = document.getElementById('searchCustomers').value;
            var customersGrid = document.getElementById("CustomersTreeGrid").ej2_instances[0];
            if (searchCustomers) {
                $.ajax({
                    type: 'POST',
                    url: '../CustomerDataManagement/SearchCustomer',
                    data: { searchValue: searchCustomers },
                    success: function (result) {
                        customersGrid.dataSource = null;
                        customersGrid.dataSource = result;
                        //alert(JSON.stringify(result));
                        customersGrid.refresh();

                    }
                });
            }
        }








        function EntitiesActionComplete(args) {



        }

        function ValidateInput(args) {
            var Instance = document.getElementById("InstanceGrid").ej2_instances[0];
            if (args.requestType === 'save') {
                var propertyId = args.data.propertyId;
                var propertyName = args.data.propertyName;
                var value = args.data.value;


                $.ajax({
                    type: 'POST',
                    url: '../CustomerDataManagement/ValidateInput',
                    data: { propertyId: propertyId, value: value },
                    success: function (result) {
                        if (result === "Success") {
                            if (!unsavedData) {
                                unsavedData = "unsavedData";
                            }
                        }
                        else {
                            //alert(result);
                            var toast = document.getElementById('toast').ej2_instances[0];
                            toast.target = document.body;
                            toast.title = "Data Validation Failed";
                            toast.content = result;
                            toast.show();

                            //Instance.setCellValue(propertyId, "value", "");
                            var row = Instance.getRowIndexByPrimaryKey(propertyId);
                            Instance.updateRow(row, { propertyId: propertyId, propertyName: propertyName, value: "" });

                        }


                    }
                });

                UpdateInstanceInfo();
            }

        }

        function ValidateInput2(args) {
            var Instance = document.getElementById("InstanceGrid2").ej2_instances[0];
            if (args.requestType === 'save') {
                var propertyId = args.data.propertyId;
                var propertyName = args.data.propertyName;
                var value = args.data.value;


                $.ajax({
                    type: 'POST',
                    url: '../CustomerDataManagement/ValidateInput',
                    data: { propertyId: propertyId, value: value },
                    success: function (result) {
                        if (result === "Success") {
                            if (!unsavedData) {
                                unsavedData = "unsavedData";
                            }
                        }
                        else {
                            //alert(result);
                            var toast = document.getElementById('toast').ej2_instances[0];
                            toast.target = document.body;
                            toast.title = "Data Validation Failed";
                            toast.content = result;
                            toast.show();



                            //Instance.setCellValue(propertyId, "value", "");
                            var row = Instance.getRowIndexByPrimaryKey(propertyId);
                            Instance.updateRow(row, { propertyId: propertyId, propertyName: propertyName, value: "" });

                        }


                    }
                });

            }

        }

        function UpdateInstanceInfo() {
            var instanceName = document.getElementById("newInstanceName");
            var Instance = document.getElementById("InstanceGrid").ej2_instances[0];
            var EntitiesTreeGrid = document.getElementById("EntitiesTreeGrid").ej2_instances[0];

            $.ajax({
                type: 'POST',
                url: '../CustomerDataManagement/UpdateInstanceInfo',
                data: { entityId: selectedEntity, instanceName: instanceName.value, instanceProperties: Instance.dataSource },
                success: function (result) {
                    if (result === "Success") {
                        EntitiesTreeGrid.getSelectedRows()[0].style.background = '#a2e6b1';
                    }
                    else {
                        EntitiesTreeGrid.getSelectedRows()[0].style.background = '#fff';
                    }
                }
            });
        }

        document.getElementById('save').onclick = function () {
            var EntitiesTreeGrid = document.getElementById("EntitiesTreeGrid").ej2_instances[0];
            $.ajax({
                type: 'POST',
                url: '../CustomerDataManagement/Save/',
                data: { datefilter: $("#datefilter").val() },
                success: function (result) {
                    if (result === "Success") {
                        //alert("New customer info has been successfully saved.")
                        var toast = document.getElementById('toast').ej2_instances[0];
                        toast.target = document.body;
                        toast.title = "Success";
                        toast.content = "New customer info has been successfully saved.";
                        toast.show();
                        unsavedData = "";
                        EntitiesTreeGrid.refresh();
                    }
                    else {
                        //alert(result);
                        var toast = document.getElementById('toast').ej2_instances[0];
                        toast.target = document.body;
                        toast.title = "Error";
                        toast.content = result;
                        toast.show();

                    }
                }
            });
        }

        document.getElementById('saveExisting').onclick = function () {
            var Instance = document.getElementById("InstanceGrid2").ej2_instances[0];
            var instanceName = document.getElementById("newInstanceName2").value;
            var EntitiesTreeGrid = document.getElementById("EntitiesTreeGrid").ej2_instances[0];

            $.ajax({
                type: 'POST',
                url: '../CustomerDataManagement/SaveExistingCustomerData',
                data: { values: Instance.getCurrentViewRecords(), instanceName: instanceName, customerId: selectedCustomer, entityId: selectedEntity, instanceId: selectedInstance },
                success: function (result) {
                    if (result === "Success") {
                        //alert("Info has been successfully saved in database");
                        var toast = document.getElementById('toast').ej2_instances[0];
                        toast.target = document.body;
                        toast.title = "Success";
                        toast.content = "Info has been successfully saved in database";
                        toast.show();
                        unsavedData = "";
                        var searchCustomers = document.getElementById('searchCustomers').value;
                        var customersGrid = document.getElementById("CustomersTreeGrid").ej2_instances[0];
                        if (searchCustomers) {
                            $.ajax({
                                type: 'POST',
                                url: '../CustomerDataManagement/SearchCustomer',
                                data: { searchValue: searchCustomers },
                                success: function (result) {
                                    customersGrid.dataSource = null;
                                    customersGrid.dataSource = result;
                                    //alert(JSON.stringify(result));
                                    customersGrid.refresh();

                                }
                            });
                        }
                    }
                    else {
                        //alert(result);
                        var toast = document.getElementById('toast').ej2_instances[0];
                        toast.target = document.body;
                        toast.title = "Error";
                        toast.content = result;
                        toast.show();
                    }

                }
            });
        }

        document.getElementById('delete').onclick = function () {
            DialogObj = ej.popups.DialogUtility.confirm({
                title: ' Confirmation Dialog',
                content: "Are you sure you want to delete the selected instance?",
                okButton: { text: 'Yes', click: okClick },
                cancelButton: { text: 'Cancel', click: cancelClick },
                showCloseIcon: true,
                closeOnEscape: true,
                animationSettings: { effect: 'Zoom' }
            });


        }

        function okClick() {
            DialogObj.hide();
            var Instance = document.getElementById("InstanceGrid2").ej2_instances[0];
            var instanceName = document.getElementById("newInstanceName2").value;
            var EntitiesTreeGrid = document.getElementById("EntitiesTreeGrid").ej2_instances[0];

            $.ajax({
                type: 'POST',
                url: '../CustomerDataManagement/DeleteCustomerInstance',
                data: { instanceId: selectedInstance },
                success: function (result) {
                    if (result === "Success") {
                        //alert("Instance has been deleted");
                        var toast = document.getElementById('toast').ej2_instances[0];
                        toast.target = document.body;
                        toast.title = "Success";
                        toast.content = "Instance has been deleted";
                        toast.show();
                        var searchCustomers = document.getElementById('searchCustomers').value;
                        var customersGrid = document.getElementById("CustomersTreeGrid").ej2_instances[0];
                        if (searchCustomers) {
                            $.ajax({
                                type: 'POST',
                                url: '../CustomerDataManagement/SearchCustomer',
                                data: { searchValue: searchCustomers },
                                success: function (result) {
                                    customersGrid.dataSource = null;
                                    customersGrid.dataSource = result;
                                    //alert(JSON.stringify(result));
                                    customersGrid.refresh();

                                }
                            });
                        }
                    }
                    else {
                        //alert(result);
                        var toast = document.getElementById('toast').ej2_instances[0];
                        toast.target = document.body;
                        toast.title = "Error";
                        toast.content = result;
                        toast.show();
                    }

                }
            });
        }

        function cancelClick() {
            DialogObj.hide();
        }

        window.onbeforeunload = closingCode;
        function closingCode() {
            if (unsavedData) {
                return "You have unsaved changes. Are you sure you want to navigate away?";
            }
        }

        function sleep(milliseconds) {
            const date = Date.now();
            let currentDate = null;
            do {
                currentDate = Date.now();
            } while (currentDate - date < milliseconds);
        }


    </script>
    <style>
        /* Content area styles */
        .controlbutton {
            width: 100%;
            white-space: pre-wrap;
        }
    </style>
